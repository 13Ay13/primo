'use strict'

import {writable} from 'svelte/store'
import {ComponentEditor,ComponentLibrary,PageSections,SitePages,PageStyles,SiteStyles,PageSettings,SiteSettings,Dependencies} from '@modal'
import Mousetrap from 'mousetrap'

const initialState = {
  visible: false,
  component: null,
  componentProps: {},
  header: {
    title: '',
    icon: null
  },
  variants: '',
  disableClose: false
}

const store = writable(initialState)

const modal_startup = () => {
  Mousetrap.bind('backspace', (e) => {
    e.preventDefault()
  })
}
const modal_cleanup = () => {
  Mousetrap.unbind('backspace')
}

const modalTypes = {
  'COMPONENT_EDITOR' : {
    component: ComponentEditor,
    header: {
      title: 'Create Component',
      icon: 'fas fa-code'
    },
    variants: 'fullscreen'
  },
  'COMPONENT_LIBRARY' : {
    component: ComponentLibrary,
    header: {
      title: 'Symbol Library',
      icon: 'fas fa-th-large'
    },
    variants: 'fullscreen'
  },
  'PAGE_SECTIONS' : {
    component: PageSections,
    header: {
      title: 'Add Page Section',
      icon: 'fas fa-columns'
    },
    variants: 'max-w-lg'
  },
  'SITE_PAGES' : {
    component: SitePages,
    header: {
      title: 'Pages',
      icon: 'fas fa-file'
    },
    variants: 'max-w-md'
  },
  'PAGE_STYLES' : {
    component: PageStyles,
    header: {
      title: 'Page Styles',
      icon: 'fab fa-css3'
    },
    variants: 'fullscreen'
  },
  'PAGE_DATA' : {
    component: PageSettings,
    header: {
      title: 'Page Data',
      icon: 'fas fa-database'
    },
    variants: 'max-w-md'
  },
  'DEPENDENCIES' : {
    component: Dependencies,
    header: {
      title: 'Dependencies',
      icon: 'fas fa-cube'
    },
    variants: 'max-w-lg'
  },
  'SITE_STYLES' : {
    component: SiteStyles,
    header: {
      title: 'Site Styles',
      icon: 'fab fa-css3'
    },
    variants: 'fullscreen'
  },
  'SITE_DATA' : {
    component: SiteSettings,
    header: {
      title: 'Site Data',
      icon: 'fas fa-database'
    },
    variants: 'max-w-3xl'
  },
}

export default {
  show: (type, props = {}, modalOptions = {}) => {
    const typeToShow = getModalType(type, props)
    modal_startup()
    store.update(s => ({ 
      ...s, 
      ...typeToShow,
      ...modalOptions,
      visible: true 
    }))
  },
  hide: () => {
    modal_cleanup()
    store.update(s => ({...initialState}) )
  },
  register: (args) => {
    const { id, component, options={} } = args
    modalTypes[id] = {
      component,
      header: options.header,
      variants: options.width ? `max-w-${options.width}` : '',
      ...options
    }
  },
  subscribe: store.subscribe
}

function getModalType(type, props) {
  return {
    ...modalTypes[type],
    componentProps: props
  } || console.error('Invalid modal type:', type)
}
