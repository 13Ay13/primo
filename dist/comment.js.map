{"version":3,"file":"comment.js","sources":["../node_modules/codemirror/addon/comment/comment.js"],"sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  var noOptions = {};\n  var nonWS = /[^\\s\\u00a0]/;\n  var Pos = CodeMirror.Pos, cmp = CodeMirror.cmpPos;\n\n  function firstNonWS(str) {\n    var found = str.search(nonWS);\n    return found == -1 ? 0 : found;\n  }\n\n  CodeMirror.commands.toggleComment = function(cm) {\n    cm.toggleComment();\n  };\n\n  CodeMirror.defineExtension(\"toggleComment\", function(options) {\n    if (!options) options = noOptions;\n    var cm = this;\n    var minLine = Infinity, ranges = this.listSelections(), mode = null;\n    for (var i = ranges.length - 1; i >= 0; i--) {\n      var from = ranges[i].from(), to = ranges[i].to();\n      if (from.line >= minLine) continue;\n      if (to.line >= minLine) to = Pos(minLine, 0);\n      minLine = from.line;\n      if (mode == null) {\n        if (cm.uncomment(from, to, options)) mode = \"un\";\n        else { cm.lineComment(from, to, options); mode = \"line\"; }\n      } else if (mode == \"un\") {\n        cm.uncomment(from, to, options);\n      } else {\n        cm.lineComment(from, to, options);\n      }\n    }\n  });\n\n  // Rough heuristic to try and detect lines that are part of multi-line string\n  function probablyInsideString(cm, pos, line) {\n    return /\\bstring\\b/.test(cm.getTokenTypeAt(Pos(pos.line, 0))) && !/^[\\'\\\"\\`]/.test(line)\n  }\n\n  function getMode(cm, pos) {\n    var mode = cm.getMode()\n    return mode.useInnerComments === false || !mode.innerMode ? mode : cm.getModeAt(pos)\n  }\n\n  CodeMirror.defineExtension(\"lineComment\", function(from, to, options) {\n    if (!options) options = noOptions;\n    var self = this, mode = getMode(self, from);\n    var firstLine = self.getLine(from.line);\n    if (firstLine == null || probablyInsideString(self, from, firstLine)) return;\n\n    var commentString = options.lineComment || mode.lineComment;\n    if (!commentString) {\n      if (options.blockCommentStart || mode.blockCommentStart) {\n        options.fullLines = true;\n        self.blockComment(from, to, options);\n      }\n      return;\n    }\n\n    var end = Math.min(to.ch != 0 || to.line == from.line ? to.line + 1 : to.line, self.lastLine() + 1);\n    var pad = options.padding == null ? \" \" : options.padding;\n    var blankLines = options.commentBlankLines || from.line == to.line;\n\n    self.operation(function() {\n      if (options.indent) {\n        var baseString = null;\n        for (var i = from.line; i < end; ++i) {\n          var line = self.getLine(i);\n          var whitespace = line.slice(0, firstNonWS(line));\n          if (baseString == null || baseString.length > whitespace.length) {\n            baseString = whitespace;\n          }\n        }\n        for (var i = from.line; i < end; ++i) {\n          var line = self.getLine(i), cut = baseString.length;\n          if (!blankLines && !nonWS.test(line)) continue;\n          if (line.slice(0, cut) != baseString) cut = firstNonWS(line);\n          self.replaceRange(baseString + commentString + pad, Pos(i, 0), Pos(i, cut));\n        }\n      } else {\n        for (var i = from.line; i < end; ++i) {\n          if (blankLines || nonWS.test(self.getLine(i)))\n            self.replaceRange(commentString + pad, Pos(i, 0));\n        }\n      }\n    });\n  });\n\n  CodeMirror.defineExtension(\"blockComment\", function(from, to, options) {\n    if (!options) options = noOptions;\n    var self = this, mode = getMode(self, from);\n    var startString = options.blockCommentStart || mode.blockCommentStart;\n    var endString = options.blockCommentEnd || mode.blockCommentEnd;\n    if (!startString || !endString) {\n      if ((options.lineComment || mode.lineComment) && options.fullLines != false)\n        self.lineComment(from, to, options);\n      return;\n    }\n    if (/\\bcomment\\b/.test(self.getTokenTypeAt(Pos(from.line, 0)))) return\n\n    var end = Math.min(to.line, self.lastLine());\n    if (end != from.line && to.ch == 0 && nonWS.test(self.getLine(end))) --end;\n\n    var pad = options.padding == null ? \" \" : options.padding;\n    if (from.line > end) return;\n\n    self.operation(function() {\n      if (options.fullLines != false) {\n        var lastLineHasText = nonWS.test(self.getLine(end));\n        self.replaceRange(pad + endString, Pos(end));\n        self.replaceRange(startString + pad, Pos(from.line, 0));\n        var lead = options.blockCommentLead || mode.blockCommentLead;\n        if (lead != null) for (var i = from.line + 1; i <= end; ++i)\n          if (i != end || lastLineHasText)\n            self.replaceRange(lead + pad, Pos(i, 0));\n      } else {\n        var atCursor = cmp(self.getCursor(\"to\"), to) == 0, empty = !self.somethingSelected()\n        self.replaceRange(endString, to);\n        if (atCursor) self.setSelection(empty ? to : self.getCursor(\"from\"), to)\n        self.replaceRange(startString, from);\n      }\n    });\n  });\n\n  CodeMirror.defineExtension(\"uncomment\", function(from, to, options) {\n    if (!options) options = noOptions;\n    var self = this, mode = getMode(self, from);\n    var end = Math.min(to.ch != 0 || to.line == from.line ? to.line : to.line - 1, self.lastLine()), start = Math.min(from.line, end);\n\n    // Try finding line comments\n    var lineString = options.lineComment || mode.lineComment, lines = [];\n    var pad = options.padding == null ? \" \" : options.padding, didSomething;\n    lineComment: {\n      if (!lineString) break lineComment;\n      for (var i = start; i <= end; ++i) {\n        var line = self.getLine(i);\n        var found = line.indexOf(lineString);\n        if (found > -1 && !/comment/.test(self.getTokenTypeAt(Pos(i, found + 1)))) found = -1;\n        if (found == -1 && nonWS.test(line)) break lineComment;\n        if (found > -1 && nonWS.test(line.slice(0, found))) break lineComment;\n        lines.push(line);\n      }\n      self.operation(function() {\n        for (var i = start; i <= end; ++i) {\n          var line = lines[i - start];\n          var pos = line.indexOf(lineString), endPos = pos + lineString.length;\n          if (pos < 0) continue;\n          if (line.slice(endPos, endPos + pad.length) == pad) endPos += pad.length;\n          didSomething = true;\n          self.replaceRange(\"\", Pos(i, pos), Pos(i, endPos));\n        }\n      });\n      if (didSomething) return true;\n    }\n\n    // Try block comments\n    var startString = options.blockCommentStart || mode.blockCommentStart;\n    var endString = options.blockCommentEnd || mode.blockCommentEnd;\n    if (!startString || !endString) return false;\n    var lead = options.blockCommentLead || mode.blockCommentLead;\n    var startLine = self.getLine(start), open = startLine.indexOf(startString)\n    if (open == -1) return false\n    var endLine = end == start ? startLine : self.getLine(end)\n    var close = endLine.indexOf(endString, end == start ? open + startString.length : 0);\n    var insideStart = Pos(start, open + 1), insideEnd = Pos(end, close + 1)\n    if (close == -1 ||\n        !/comment/.test(self.getTokenTypeAt(insideStart)) ||\n        !/comment/.test(self.getTokenTypeAt(insideEnd)) ||\n        self.getRange(insideStart, insideEnd, \"\\n\").indexOf(endString) > -1)\n      return false;\n\n    // Avoid killing block comments completely outside the selection.\n    // Positions of the last startString before the start of the selection, and the first endString after it.\n    var lastStart = startLine.lastIndexOf(startString, from.ch);\n    var firstEnd = lastStart == -1 ? -1 : startLine.slice(0, from.ch).indexOf(endString, lastStart + startString.length);\n    if (lastStart != -1 && firstEnd != -1 && firstEnd + endString.length != from.ch) return false;\n    // Positions of the first endString after the end of the selection, and the last startString before it.\n    firstEnd = endLine.indexOf(endString, to.ch);\n    var almostLastStart = endLine.slice(to.ch).lastIndexOf(startString, firstEnd - to.ch);\n    lastStart = (firstEnd == -1 || almostLastStart == -1) ? -1 : to.ch + almostLastStart;\n    if (firstEnd != -1 && lastStart != -1 && lastStart != to.ch) return false;\n\n    self.operation(function() {\n      self.replaceRange(\"\", Pos(end, close - (pad && endLine.slice(close - pad.length, close) == pad ? pad.length : 0)),\n                        Pos(end, close + endString.length));\n      var openEnd = open + startString.length;\n      if (pad && startLine.slice(openEnd, openEnd + pad.length) == pad) openEnd += pad.length;\n      self.replaceRange(\"\", Pos(start, open), Pos(start, openEnd));\n      if (lead) for (var i = start + 1; i <= end; ++i) {\n        var line = self.getLine(i), found = line.indexOf(lead);\n        if (found == -1 || nonWS.test(line.slice(0, found))) continue;\n        var foundEnd = found + lead.length;\n        if (pad && line.slice(foundEnd, foundEnd + pad.length) == pad) foundEnd += pad.length;\n        self.replaceRange(\"\", Pos(i, found), Pos(i, foundEnd));\n      }\n    });\n    return true;\n  });\n});\n"],"names":["CodeMirror","noOptions","nonWS","Pos","cmp","cmpPos","str","found","search","cm","pos","line","test","getTokenTypeAt","mode","getMode","useInnerComments","innerMode","getModeAt","commands","toggleComment","defineExtension","options","this","minLine","Infinity","ranges","listSelections","i","length","from","to","uncomment","lineComment","self","firstLine","getLine","probablyInsideString","commentString","end","Math","min","ch","lastLine","pad","padding","blankLines","commentBlankLines","operation","indent","baseString","whitespace","slice","firstNonWS","cut","replaceRange","blockCommentStart","fullLines","blockComment","startString","endString","blockCommentEnd","lastLineHasText","lead","blockCommentLead","atCursor","getCursor","empty","somethingSelected","setSelection","didSomething","start","lineString","lines","indexOf","push","i2","line2","endPos","startLine","open","endLine","close","insideStart","insideEnd","getRange","lastStart","lastIndexOf","firstEnd","almostLastStart","openEnd","found2","foundEnd","require$$0"],"mappings":"8DAUG,SAASA,OAGNC,EAAY,GACZC,EAAQ,cACRC,EAAMH,EAAWG,IAAKC,EAAMJ,EAAWK,kBAEvBC,OACdC,EAAQD,EAAIE,OAAON,aAChBK,EAAc,EAAIA,aA4BGE,EAAIC,EAAKC,SAC9B,aAAaC,KAAKH,EAAGI,eAAeV,EAAIO,EAAIC,KAAM,OAAS,YAAYC,KAAKD,cAGpEF,EAAIC,OACfI,EAAOL,EAAGM,iBACmB,IAA1BD,EAAKE,kBAA+BF,EAAKG,UAAmBR,EAAGS,UAAUR,GAApBI,IA/BnDK,SAASC,cAAgB,SAASX,KACxCW,mBAGMC,gBAAgB,iBAAiB,SAASC,GAC9CA,MAAmBrB,WACpBQ,EAAKc,KACLC,EAAUC,EAAAA,EAAUC,EAASH,KAAKI,iBAAkBb,EAAO,KACtDc,EAAIF,EAAOG,OAAS,EAAGD,GAAK,EAAGA,IAAK,KACvCE,EAAOJ,EAAOE,GAAGE,OAAQC,EAAKL,EAAOE,GAAGG,KACxCD,EAAKnB,MAAQa,IACbO,EAAGpB,MAAQa,MAAcrB,EAAIqB,EAAS,MAChCM,EAAKnB,KACH,MAARG,EACEL,EAAGuB,UAAUF,EAAMC,EAAIT,KAAiB,QAClCW,YAAYH,EAAMC,EAAIT,KAAiB,QAChC,MAARR,IACNkB,UAAUF,EAAMC,EAAIT,KAEpBW,YAAYH,EAAMC,EAAIT,UAepBD,gBAAgB,eAAe,SAASS,EAAMC,EAAIT,GACtDA,MAAmBrB,OACpBiC,EAAOX,KAAMT,EAAOC,EAAQmB,EAAMJ,GAClCK,EAAYD,EAAKE,QAAQN,EAAKnB,SACjB,MAAbwB,IAAqBE,EAAqBH,EAAMJ,EAAMK,QAEtDG,EAAgBhB,EAAQW,aAAenB,EAAKmB,eAC3CK,OAQDC,EAAMC,KAAKC,IAAa,GAATV,EAAGW,IAAWX,EAAGpB,MAAQmB,EAAKnB,KAAOoB,EAAGpB,KAAO,EAAIoB,EAAGpB,KAAMuB,EAAKS,WAAa,GAC7FC,EAAyB,MAAnBtB,EAAQuB,QAAkB,IAAMvB,EAAQuB,QAC9CC,EAAaxB,EAAQyB,mBAAqBjB,EAAKnB,MAAQoB,EAAGpB,OAEzDqC,WAAU,cACT1B,EAAQ2B,OAAQ,SACdC,EAAa,KACRtB,EAAIE,EAAKnB,KAAMiB,EAAIW,IAAOX,EAAG,KAEhCuB,GADAxC,EAAOuB,EAAKE,QAAQR,IACFwB,MAAM,EAAGC,EAAW1C,KACxB,MAAduC,GAAsBA,EAAWrB,OAASsB,EAAWtB,YAC1CsB,OAGRvB,EAAIE,EAAKnB,KAAMiB,EAAIW,IAAOX,EAAG,KAChCjB,EAAOuB,EAAKE,QAAQR,GAAI0B,EAAMJ,EAAWrB,QACxCiB,GAAe5C,EAAMU,KAAKD,MAC3BA,EAAKyC,MAAM,EAAGE,IAAQJ,MAAkBG,EAAW1C,MAClD4C,aAAaL,EAAaZ,EAAgBM,EAAKzC,EAAIyB,EAAG,GAAIzB,EAAIyB,EAAG0B,eAG/D1B,EAAIE,EAAKnB,KAAMiB,EAAIW,IAAOX,GAC7BkB,GAAc5C,EAAMU,KAAKsB,EAAKE,QAAQR,QACnC2B,aAAajB,EAAgBM,EAAKzC,EAAIyB,EAAG,YA9BhDN,EAAQkC,mBAAqB1C,EAAK0C,uBAC5BC,WAAY,IACfC,aAAa5B,EAAMC,EAAIT,UAkCvBD,gBAAgB,gBAAgB,SAASS,EAAMC,EAAIT,GACvDA,MAAmBrB,OACpBiC,EAAOX,KAAMT,EAAOC,EAAQmB,EAAMJ,GAClC6B,EAAcrC,EAAQkC,mBAAqB1C,EAAK0C,kBAChDI,EAAYtC,EAAQuC,iBAAmB/C,EAAK+C,mBAC3CF,GAAgBC,OAKjB,cAAchD,KAAKsB,EAAKrB,eAAeV,EAAI2B,EAAKnB,KAAM,UAEtD4B,EAAMC,KAAKC,IAAIV,EAAGpB,KAAMuB,EAAKS,YAC7BJ,GAAOT,EAAKnB,MAAiB,GAAToB,EAAGW,IAAWxC,EAAMU,KAAKsB,EAAKE,QAAQG,OAASA,MAEnEK,EAAyB,MAAnBtB,EAAQuB,QAAkB,IAAMvB,EAAQuB,QAC9Cf,EAAKnB,KAAO4B,KAEXS,WAAU,cACY,GAArB1B,EAAQmC,UAAoB,KAC1BK,EAAkB5D,EAAMU,KAAKsB,EAAKE,QAAQG,MACzCgB,aAAaX,EAAMgB,EAAWzD,EAAIoC,MAClCgB,aAAaI,EAAcf,EAAKzC,EAAI2B,EAAKnB,KAAM,QAChDoD,EAAOzC,EAAQ0C,kBAAoBlD,EAAKkD,oBAChC,MAARD,UAAuBnC,EAAIE,EAAKnB,KAAO,EAAGiB,GAAKW,IAAOX,GACpDA,GAAKW,GAAOuB,MACTP,aAAaQ,EAAOnB,EAAKzC,EAAIyB,EAAG,QACpC,KACDqC,EAA4C,GAAjC7D,EAAI8B,EAAKgC,UAAU,MAAOnC,GAAUoC,GAASjC,EAAKkC,sBAC5Db,aAAaK,EAAW7B,GACzBkC,KAAeI,aAAaF,EAAQpC,EAAKG,EAAKgC,UAAU,QAASnC,KAChEwB,aAAaI,EAAa7B,eAzBpBG,aAAenB,EAAKmB,cAAqC,GAArBX,EAAQmC,aAClDxB,YAAYH,EAAMC,EAAIT,QA6BtBD,gBAAgB,aAAa,SAASS,EAAMC,EAAIT,GACpDA,MAAmBrB,OAMmCqE,EALvDpC,EAAOX,KAAMT,EAAOC,EAAQmB,EAAMJ,GAClCS,EAAMC,KAAKC,IAAa,GAATV,EAAGW,IAAWX,EAAGpB,MAAQmB,EAAKnB,KAAOoB,EAAGpB,KAAOoB,EAAGpB,KAAO,EAAGuB,EAAKS,YAAa4B,EAAQ/B,KAAKC,IAAIX,EAAKnB,KAAM4B,GAGzHiC,EAAalD,EAAQW,aAAenB,EAAKmB,YAAawC,EAAQ,GAC9D7B,EAAyB,MAAnBtB,EAAQuB,QAAkB,IAAMvB,EAAQuB,aAE3C2B,WACI5C,EAAI2C,EAAO3C,GAAKW,IAAOX,EAAG,KAC7BjB,EAAOuB,EAAKE,QAAQR,GACpBrB,EAAQI,EAAK+D,QAAQF,MACrBjE,OAAe,UAAUK,KAAKsB,EAAKrB,eAAeV,EAAIyB,EAAGrB,EAAQ,iBACjEA,GAAeL,EAAMU,KAAKD,cAC1BJ,MAAcL,EAAMU,KAAKD,EAAKyC,MAAM,EAAG7C,cACrCoE,KAAKhE,QAERqC,WAAU,mBACJ4B,EAAIL,EAAOK,GAAKrC,IAAOqC,EAAG,KAC7BC,EAAOJ,EAAMG,EAAIL,GACjB7D,EAAMmE,EAAKH,QAAQF,GAAaM,EAASpE,EAAM8D,EAAW3C,OAC1DnB,EAAM,IACNmE,EAAKzB,MAAM0B,EAAQA,EAASlC,EAAIf,SAAWe,OAAeA,EAAIf,WACnD,IACV0B,aAAa,GAAIpD,EAAIyE,EAAGlE,GAAMP,EAAIyE,EAAGE,SAG1CR,SAAqB,MAIvBX,EAAcrC,EAAQkC,mBAAqB1C,EAAK0C,kBAChDI,EAAYtC,EAAQuC,iBAAmB/C,EAAK+C,oBAC3CF,IAAgBC,SAAkB,MACnCG,EAAOzC,EAAQ0C,kBAAoBlD,EAAKkD,iBACxCe,EAAY7C,EAAKE,QAAQmC,GAAQS,EAAOD,EAAUL,QAAQf,UAC1DqB,SAAmB,MACnBC,EAAU1C,GAAOgC,EAAQQ,EAAY7C,EAAKE,QAAQG,GAClD2C,EAAQD,EAAQP,QAAQd,EAAWrB,GAAOgC,EAAQS,EAAOrB,EAAY9B,OAAS,GAC9EsD,EAAchF,EAAIoE,EAAOS,EAAO,GAAII,EAAYjF,EAAIoC,EAAK2C,EAAQ,UACjEA,IACC,UAAUtE,KAAKsB,EAAKrB,eAAesE,MACnC,UAAUvE,KAAKsB,EAAKrB,eAAeuE,KACpClD,EAAKmD,SAASF,EAAaC,EAAW,MAAMV,QAAQd,aAC/C,MAIL0B,EAAYP,EAAUQ,YAAY5B,EAAa7B,EAAKY,IACpD8C,MAAWF,KAAuBP,EAAU3B,MAAM,EAAGtB,EAAKY,IAAIgC,QAAQd,EAAW0B,EAAY3B,EAAY9B,eACzGyD,OAAmBE,GAAkBA,EAAW5B,EAAU/B,QAAUC,EAAKY,UAAW,IAE7EuC,EAAQP,QAAQd,EAAW7B,EAAGW,QACrC+C,EAAkBR,EAAQ7B,MAAMrB,EAAGW,IAAI6C,YAAY5B,EAAa6B,EAAWzD,EAAGW,iBACrE8C,OAAkBC,KAA8B1D,EAAGW,GAAK+C,OACjED,OAAkBF,GAAmBA,GAAavD,EAAGW,QAEpDM,WAAU,aACRO,aAAa,GAAIpD,EAAIoC,EAAK2C,MAAgBD,EAAQ7B,MAAM8B,EAAQtC,EAAIf,OAAQqD,IAAUtC,EAAMA,EAAIf,OAAS,IAC5F1B,EAAIoC,EAAK2C,EAAQtB,EAAU/B,aACzC6D,EAAUV,EAAOrB,EAAY9B,UAC7Be,GAAOmC,EAAU3B,MAAMsC,EAASA,EAAU9C,EAAIf,SAAWe,OAAgBA,EAAIf,UAC5E0B,aAAa,GAAIpD,EAAIoE,EAAOS,GAAO7E,EAAIoE,EAAOmB,IAC/C3B,UAAea,EAAIL,EAAQ,EAAGK,GAAKrC,IAAOqC,EAAG,KAC3CC,EAAO3C,EAAKE,QAAQwC,GAAIe,EAAQd,EAAKH,QAAQX,UAC7C4B,IAAezF,EAAMU,KAAKiE,EAAKzB,MAAM,EAAGuC,SACxCC,EAAWD,EAAQ5B,EAAKlC,OACxBe,GAAOiC,EAAKzB,MAAMwC,EAAUA,EAAWhD,EAAIf,SAAWe,OAAiBA,EAAIf,UAC1E0B,aAAa,GAAIpD,EAAIyE,EAAGe,GAAQxF,EAAIyE,EAAGgB,UAGzC,OA3MHC"}