'use strict'

import {writable} from 'svelte/store'
import {ComponentEditor,ComponentLibrary,PageSections,SitePages,PageStyles,SiteStyles,PageSettings,SiteSettings,Dependencies,Publish,Authenticate,Invitation,SubdomainCreation,Collaborate,UserSettings} from '@modal'
import Mousetrap from 'mousetrap'

const initialState = {
  visible: false,
  component: null,
  componentProps: {},
  header: {
    title: '',
    icon: null
  },
  variants: ''
}

const store = writable(initialState)

const modal_startup = () => {
  Mousetrap.bind('backspace', (e) => {
    e.preventDefault()
  })
}
const modal_cleanup = () => {
  Mousetrap.unbind('backspace')
}

export default {
  show: (type, props = {}, modalOptions = {}) => {
    const typeToShow = getModalType(type, props)
    modal_startup()
    store.update(s => ({ 
      ...s, 
      ...typeToShow,
      ...modalOptions,
      visible: true 
    }))
  },
  hide: () => {
    modal_cleanup()
    store.update(s => ({...initialState}) )
  },
  subscribe: store.subscribe
}

function getModalType(type, props) {
  return {
    'COMPONENT_EDITOR' : {
      component: ComponentEditor,
      componentProps: props,
      header: {
        title: 'Create Component',
        icon: 'fas fa-code'
      },
      variants: 'fullscreen'
    },
    'COMPONENT_LIBRARY' : {
      component: ComponentLibrary,
      componentProps: props,
      header: {
        title: 'Symbol Library',
        icon: 'fas fa-th-large'
      },
      variants: 'fullscreen'
    },
    'PAGE_SECTIONS' : {
      component: PageSections,
      componentProps: props,
      header: {
        title: 'Add Page Section',
        icon: 'fas fa-columns'
      },
      variants: 'max-w-lg'
    },
    'SITE_PAGES' : {
      component: SitePages,
      componentProps: props,
      header: {
        title: 'Pages',
        icon: 'fas fa-file'
      },
      variants: 'max-w-md'
    },
    'PAGE_STYLES' : {
      component: PageStyles,
      componentProps: props,
      header: {
        title: 'Page Styles',
        icon: 'fab fa-css3'
      },
      variants: 'fullscreen'
    },
    'PAGE_DATA' : {
      component: PageSettings,
      componentProps: props,
      header: {
        title: 'Page Data',
        icon: 'fas fa-database'
      },
      variants: 'max-w-md'
    },
    'DEPENDENCIES' : {
      component: Dependencies,
      componentProps: props,
      header: {
        title: 'Dependencies',
        icon: 'fas fa-cube'
      },
      variants: 'max-w-lg'
    },
    'PUBLISH' : {
      component: Publish,
      componentProps: props,
      header: {
        title: 'Publish',
        icon: 'fab fa-github'
      },
      variants: 'max-w-md'
    },
    'AUTHENTICATION' : {
      component: Authenticate,
      componentProps: props,
      header: null,
      variants: 'max-w-md'
    },
    'INVITATION' : {
      component: Invitation,
      componentProps: props,
      header: {
        title: 'Invitation to Collaborate',
      },
      variants: 'max-w-md'
    },
    'SUBDOMAIN_CREATION' : {
      component: SubdomainCreation,
      componentProps: props,
      header: {
        title: 'Create a Site'
      },
      variants: 'max-w-md'
    },
    'COLLABORATE' : {
      component: Collaborate,
      componentProps: props,
      header: {
        title: 'Accept Invitation',
      },
      variants: 'max-w-md'
    },
    'USER_SETTINGS' : {
      component: UserSettings,
      componentProps: props,
      header: {
        title: 'User Settings',
      },
      variants: 'max-w-md'
    },
    'SITE_STYLES' : {
      component: SiteStyles,
      componentProps: props,
      header: {
        title: 'Site Styles',
        icon: 'fab fa-css3'
      },
      variants: 'fullscreen'
    },
    'SITE_DATA' : {
      component: SiteSettings,
      componentProps: props,
      header: {
        title: 'Site Data',
        icon: 'fas fa-database'
      },
      variants: 'max-w-3xl'
    },
  }[type] || console.error('Invalid modal type:', type)

}
