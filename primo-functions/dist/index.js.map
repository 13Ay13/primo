{"version":3,"file":"index.js","sources":["../index.js"],"sourcesContent":["// Libraries for Cloud Functions\nconst autoprefixer = require('autoprefixer')\nconst postcss = require('postcss')\nconst precss = require('precss')\nconst tailwindCSS = require('tailwindcss')\nvar CleanCSS = require('clean-css')\n\nasync function processPostCSS(css, html, options, onsuccess) {\n  let { tailwindConfig, includeBase, purge, includeTailwind } = options\n\n  try {\n    tailwindConfig = tailwindConfig\n      ? new Function(`return ${tailwindConfig}`)()\n      : {}\n    tailwindConfig = {\n      ...tailwindConfig,\n      purge: {\n        enabled: purge,\n        content: [\n          {\n            raw: html,\n            extension: 'html',\n          },\n        ],\n      },\n    }\n  } catch (e) {\n    console.error(e)\n    // res.end({ error: e })\n  }\n\n  const tailwind = tailwindCSS(tailwindConfig)\n  const stylesWithTailwind = `\\\n    ${\n      includeBase\n        ? `\n      @tailwind base;`\n        : ``\n    }\\\n    ${\n      includeTailwind\n        ? `\n      @tailwind components;\\\n      @tailwind utilities;\\\n    `\n        : ''\n    }\n    \n  ${css}`\n\n  const result = await postcss([tailwind, precss, autoprefixer])\n    .process(stylesWithTailwind, { from: undefined, to: 'styles.css' })\n    .catch((e) => {\n      console.error(e)\n      // res.end(data);\n    })\n\n  if (includeTailwind) {\n    var output = new CleanCSS({}).minify(result.css)\n    return output.styles\n  } else {\n    return result.css\n  }\n\n}\n\nconst fs = require('fs')\nconst prettier = require(\"prettier\");\nconst _ = require('lodash')\n\nasync function buildSite({ pages, siteStyles }) {\n  fs.mkdir('./build', { recursive: true }, (err) => {\n    if (err) throw err;\n  });\n\n  const siteCSS = siteStyles.final\n  const formattedSiteCSS = prettier.format(siteCSS, { parser: 'css' })\n  fs.writeFile(`./build/styles.css`, formattedSiteCSS, (err) => {\n    if (err) throw err \n  })\n\n  pages.forEach(async page => {\n    const HTML = buildPageHTML(page)\n    const formattedHTML = prettier.format(HTML, { parser: 'html' })\n    fs.writeFile(`./build/${page.id}.html`, formattedHTML, (err) => {\n      if (err) throw err \n    })\n\n    const CSS = await buildPageCSS(page.content, HTML, siteStyles.raw + page.styles.raw, siteStyles.tailwind)\n    const formattedCSS = prettier.format(CSS, { parser: 'css' })\n    fs.writeFile(`./build/${page.id}.css`, formattedCSS, (err) => {\n      if (err) throw err \n    })\n  })\n\n  function buildPageHTML({ id, title, content, dependencies, styles }) {\n    let html = ''\n    content.forEach(section => {\n      html += `<section id=\"section-${section.id}\">\\n` +\n                `\\t<div class=\"columns flex flex-wrap ${section.width === 'contained' ? 'container' : ''}\">\\n`\n      section.columns.forEach(column => {\n        html += `\\t\\t<div class=\"column ${column.size}\" id=\"column-${column.id}\">\\n`\n        column.rows.forEach(row => {\n          html += row.type === 'component' \n                  ? `\\t\\t\\t<div class=\"primo-component\">\\n` +\n                      `\\t\\t\\t\\t<div id=\"component-${row.id}\" class=\"w-full\">${row.value.final.html}</div>\\n` +\n                      `\\t\\t\\t\\t<script>${row.value.final.js}</script>\\n` + \n                    `\\t\\t\\t</div>\\n`\n                  : `\\t\\t\\t<div class=\"primo-content\">\\n` +\n                      `\\t\\t\\t\\t${row.value.html}\\n` + \n                    `\\t\\t\\t</div>\\n`\n        })\n        html += `\\t\\t</div>\\n`\n      })\n      html += `\\t</div>\\n` +\n            `</section>\\n`\n    })\n\n    var regex = /href=(['\"])\\/([\\S]+)(\\1)[^>\\s]*/g;\n    html = html.replace(regex, \"href='/$2.html'\")\n\n    return `\n      <!doctype html>\n\n      <html lang=\"en\">\n      <head>\n        <meta charset=\"utf-8\">\n        <title>${ title }</title>\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <link rel=\"stylesheet\" type=\"text/css\" href=\"./styles.css\" />\n        <link rel=\"stylesheet\" type=\"text/css\" href=\"./${id}.css\" />\n        <script src=\"./${id}.js\"></script>\n        `+\n        `${dependencies.headEmbed}\n      </head>\n      <body data-instant-intensity=\"all\" class=\"primo-page\">   \n        ${html}\n        <script src=\"https://cdnjs.cloudflare.com/ajax/libs/instant.page/5.1.0/instantpage.js\" integrity=\"sha256-DdSiNPR71ROAVMqT6NiHagLAtZv9EHeByYuVxygZM5g=\" crossorigin=\"anonymous\"></script>\n      </body>\n      </html>\n    `\n  }\n\n  async function buildPageCSS(content, HTML, rawCSS, tailwindConfig) {\n\n    const components = _.flatMapDeep(content, (section) => section.columns.map(column => column.rows.filter(row => row.type === 'component')))\n    const componentStyles = components.map(component => `#component-${component.id} {${component.value.raw.css}}`).join('\\n')\n\n    const allStyles = rawCSS + componentStyles\n\n    const pageStyles = await processPostCSS(\n      allStyles, \n      HTML, \n      { \n        includeBase: true,\n        includeTailwind: true,\n        purge: true,\n        tailwindConfig\n      }\n    )\n\n    return pageStyles\n\n  }\n}\n\nmodule.exports = {\n  processPostCSS,\n  buildSite\n}"],"names":["async","processPostCSS","css","html","options","onsuccess","tailwindConfig","includeBase","purge","includeTailwind","Function","enabled","content","raw","extension","e","console","error","tailwind","tailwindCSS","stylesWithTailwind","result","postcss","precss","autoprefixer","process","from","undefined","to","catch","CleanCSS","minify","styles","buildSite","pages","siteStyles","fs","mkdir","recursive","err","siteCSS","final","formattedSiteCSS","prettier","format","parser","writeFile","forEach","HTML","id","title","dependencies","section","width","columns","column","size","rows","row","type","value","js","replace","headEmbed","buildPageHTML","page","formattedHTML","CSS","rawCSS","componentStyles","_","flatMapDeep","map","filter","component","join","allStyles","buildPageCSS","formattedCSS"],"mappings":"6LAOAA,eAAeC,EAAeC,EAAKC,EAAMC,EAASC,GAChD,IAAIC,eAAEA,EAAcC,YAAEA,EAAWC,MAAEA,EAAKC,gBAAEA,GAAoBL,EAE9D,IACEE,EAAiBA,EACb,IAAII,SAAS,UAAUJ,EAAvB,GACA,GACJA,EAAiB,IACZA,EACHE,MAAO,CACLG,QAASH,EACTI,QAAS,CACP,CACEC,IAAKV,EACLW,UAAW,WAKnB,MAAOC,GACPC,QAAQC,MAAMF,GAIhB,MAAMG,EAAWC,EAAYb,GACvBc,EAAqB,OAEvBb,EACI,0BAEA,SAGJE,EACI,8DAIA,eAGNP,IAEImB,QAAeC,EAAQ,CAACJ,EAAUK,EAAQC,IAC7CC,QAAQL,EAAoB,CAAEM,UAAMC,EAAWC,GAAI,eACnDC,MAAOd,IACNC,QAAQC,MAAMF,KAIlB,OAAIN,EACW,IAAIqB,EAAS,IAAIC,OAAOV,EAAOnB,KAC9B8B,OAEPX,EAAOnB,IAyGlB,MAAiB,CACfD,eAAAA,EACAgC,UAlGFjC,gBAAyBkC,MAAEA,EAAKC,WAAEA,IAChCC,EAAGC,MAAM,UAAW,CAAEC,WAAW,GAASC,IACxC,GAAIA,EAAK,MAAMA,IAGjB,MAAMC,EAAUL,EAAWM,MACrBC,EAAmBC,EAASC,OAAOJ,EAAS,CAAEK,OAAQ,QAC5DT,EAAGU,UAAU,qBAAsBJ,EAAmBH,IACpD,GAAIA,EAAK,MAAMA,IAGjBL,EAAMa,QAAQ/C,MAAAA,IACZ,MAAMgD,EAaR,UAAuBC,GAAEA,EAAEC,MAAEA,EAAKtC,QAAEA,EAAOuC,aAAEA,EAAYnB,OAAEA,IACzD,IAAI7B,EAAO,GACXS,EAAQmC,QAAQK,IACdjD,GAAQ,wBAAwBiD,EAAQH,8CAC4B,cAAlBG,EAAQC,MAAwB,YAAc,SAChGD,EAAQE,QAAQP,QAAQQ,IACtBpD,GAAQ,0BAA0BoD,EAAOC,oBAAoBD,EAAON,SACpEM,EAAOE,KAAKV,QAAQW,IAClBvD,GAAqB,cAAbuD,EAAIC,KAEA,mEAA8BD,EAAIT,sBAAsBS,EAAIE,MAAMnB,MAAMtC,+BACrDuD,EAAIE,MAAMnB,MAAMoB,+BAGnC,8CAAWH,EAAIE,MAAMzD,yBAGnCA,GAAQ,iBAEVA,GAAQ,2BAOV,OAFAA,EAAOA,EAAK2D,QADA,mCACe,mBAEpB,mHAMOZ,4NAGuCD,qCAChCA,6BAEdE,EAAaY,sGAGd5D,2OAtDO6D,CAAcC,GACrBC,EAAgBvB,EAASC,OAAOI,EAAM,CAAEH,OAAQ,SACtDT,EAAGU,UAAU,WAAWmB,EAAKhB,UAAWiB,EAAgB3B,IACtD,GAAIA,EAAK,MAAMA,IAGjB,MAAM4B,QAuDRnE,eAA4BY,EAASoC,EAAMoB,EAAQ9D,GAEjD,MACM+D,EADaC,EAAEC,YAAY3D,EAAUwC,GAAYA,EAAQE,QAAQkB,IAAIjB,GAAUA,EAAOE,KAAKgB,OAAOf,GAAoB,cAAbA,EAAIC,QAChFa,IAAIE,GAAa,cAAcA,EAAUzB,OAAOyB,EAAUd,MAAM/C,IAAIX,QAAQyE,KAAK,MAE9GC,EAAYR,EAASC,EAa3B,aAXyBpE,EACvB2E,EACA5B,EACA,CACEzC,aAAa,EACbE,iBAAiB,EACjBD,OAAO,EACPF,eAAAA,IArEcuE,CAAaZ,EAAKrD,QAASoC,EAAMb,EAAWtB,IAAMoD,EAAKjC,OAAOnB,IAAKsB,EAAWjB,UAC1F4D,EAAenC,EAASC,OAAOuB,EAAK,CAAEtB,OAAQ,QACpDT,EAAGU,UAAU,WAAWmB,EAAKhB,SAAU6B,EAAevC,IACpD,GAAIA,EAAK,MAAMA"}